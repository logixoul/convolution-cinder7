#include "util.h"

// todo: make it use double again rather than float for precision for the SAT. this was lost in the glm port.
template<class T>
static void buildSat(Array2D<T>& map, Array2D<T>& sums)
{
	const int w = map.w, h = map.h;
	
	sums(0, 0) = map(0, 0);
    for (int y = 1; y < h; y++)
    {
        sums(0, y) = map(0,y) + sums(0,y-1);
    }
    for (int x = 1; x < w; x++)
    {
        sums(x,0) = map(x,0) + sums(x - 1,0);
    }

    for (int y = 1; y < h; y++)
    {
		T* sumsPtr = &sums(0, y);
		for (int x = 1; x < w; x++)
		{
			sumsPtr++;
			sumsPtr[0] = map(x, y) + sumsPtr[-w] + sumsPtr[-1] - sumsPtr[-w-1];
        }
    }
}

template<class Ti>
void satBlurEdgeCase(Array2D<Ti>& image, int radius, Array2D<Ti>& result, int x1, int x2, int y1, int y2)
{
    ivec2 offset(-radius, -radius);
    for(int x=x1; x<x2; x++) {
        for(int y=y1;y<y2; y++) {
            Ti sum;
            result(x,y) = sum;
        }
    }
}

template<class T>
void satBlur(Array2D<T>& map, int radius)
{
	// the allocation and deallocation makes almost no impact on performance, so we just do it every time.
	Array2D<T> sums(map.w, map.h);
	buildSat(map, sums);
	
	Array2D<T> newMap(map.w, map.h);
	
	const float W = map.w, H = map.h;

    const int diameter = radius * 2 + 1;
	const float sq = diameter * diameter;
	
	const int bottomRight = radius * W + radius, bottomLeft = radius * W - radius - 1;
	const int topRight = -radius * W - W + radius, topLeft = -radius * W - W - radius - 1;

	/*satBlurEdgeCase<T>(image, radius, newMap, 0,                 radius,             0,                  image.h);
    satBlurEdgeCase<T>(image, radius, newMap, image.w - radius,  image.w,            0,                  image.h);
    satBlurEdgeCase<T>(image, radius, newMap, radius,            image.w - radius,   0,                  radius);
    satBlurEdgeCase<T>(image, radius, newMap, radius,            image.w - radius,   image.h-radius,     image.h);*/

    for (int y = radius + 1; y < H - radius; y++)
    {
		T* sumsPtr = &sums(radius + 1, y);
		for (int x = radius + 1; x < W - radius; x++)
		{
            T sum = sumsPtr[bottomRight] - sumsPtr[topRight] - sumsPtr[bottomLeft] + sumsPtr[topLeft];

			newMap(x, y) = sum / sq;

			sumsPtr++;
        }
    }

	map = newMap;
}

template<class T>
void satSharpen(Array2D<T>& map, int radius)
{
	Array2D<T> sums(map.w, map.h);
	buildSat(map, sums);
	float d = radius*2+1;
	float f = 1/(d*d-1);
	for(int x = radius + 1; x < map.w - radius - 1; x++)
	{
		for(int y = radius + 1; y < map.h - radius - 1; y++)
		{
			T sum =
				sums(x + radius, y + radius)
				- sums(x-radius - 1, y+radius)
				- sums(x+radius, y-radius-1)
				+ sums(x-radius-1, y-radius-1);
			
			T result = (2.4f+f) * map(x, y) - f*sum;
			result /= 1.4f;

			map(x, y) = result;
		}
	}
}
